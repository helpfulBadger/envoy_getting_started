static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 8000
    traffic_direction: OUTBOUND
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          generate_request_id: true
          tracing:
            verbose: true
            custom_tags:
            - tag: session-id
              request_header:
                name: "session-id"
                default_value: "missing"
            - tag: correlation-id
              request_header: 
                name: "correlation-id"
                default_value: "missing"
            provider:
              name: envoy.tracers.zipkin
              typed_config:
                "@type": type.googleapis.com/envoy.config.trace.v2.ZipkinConfig
                collector_cluster: jaeger
                collector_endpoint: "/api/v2/spans"
                shared_span_context: false
                collector_endpoint_version: HTTP_JSON
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: service1
                decorator:
                  operation: checkAvailability
          http_filters:
          - name: envoy.filters.http.tap
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.tap.v3.Tap
              common_config:
                static_config:
                  match_config:
                    any_match: true
                  output_config:
                    sinks:
                      - file_per_tap:
                          path_prefix: /tmp/any/
          - name: envoy.filters.http.router
            typed_config: {}
          use_remote_address: true
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/dev/stdout"
              typed_json_format: 
                "@timestamp": "%START_TIME%"
                client:
                  address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                  certificate:
                    local:
                      subject: "%DOWNSTREAM_LOCAL_SUBJECT%"
                      uri_san: "%DOWNSTREAM_LOCAL_URI_SAN%"
                    peer:
                      cert_v_end: "%DOWNSTREAM_PEER_CERT_V_END%"
                      cert_v_start: "%DOWNSTREAM_PEER_CERT_V_START%"
                      certificate: "%DOWNSTREAM_PEER_CERT%"
                      issuer: "%DOWNSTREAM_PEER_ISSUER%"
                      serial: "%DOWNSTREAM_PEER_SERIAL%"
                      uri_san: "%DOWNSTREAM_PEER_URI_SAN%"
                  direct:
                    remote:
                      address: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%"
                  local:
                    address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                  remote:
                    address_no_port: "%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%"
                  sni: "%REQUESTED_SERVER_NAME%"
                  tls:
                    cipher: "%DOWNSTREAM_TLS_CIPHER%"
                    session_id: "%DOWNSTREAM_TLS_SESSION_ID%"
                    version: "%DOWNSTREAM_TLS_VERSION%"
                envoy:
                  route:
                    name: "%ROUTE_NAME%"
                  upstream:
                    cluster: "%UPSTREAM_CLUSTER%"
                    localaddress: "%UPSTREAM_LOCAL_ADDRESS%"
                    transport_failure_reason: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                host:
                  hostname: "%HOSTNAME%"
                http:
                  request:
                    body:
                      bytes: "%BYTES_RECEIVED%"
                    duration: "%DURATION%"
                    duration_req: "%REQUEST_DURATION%"
                    headers:
                      accept: "%REQ(ACCEPT)%"
                      authority: "%REQ(:AUTHORITY)%"
                      content-length: "%REQ(CONTENT-LENGTH)%"
                      content-type: "%REQ(CONTENT-TYPE)%"
                      host: "%REQ(HOST)%"
                      id: "%REQ(X-REQUEST-ID)%"
                      session-id: "%REQ(SESSION-ID)%"
                      correlation-id: "%REQ(CORRELATION-ID)%"
                      x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                      x_forwarded_proto: "%REQ(X-FORWARDED-PROTO)%"
                      x_envoy_internal: "%REQ(X-ENVOY-INTERNAL)%"
                      x_envoy_decorator_operation: "%REQ(X-ENVOY-DECORATOR-OPERATION)%"
                      x_envoy_expected_rq_timeout_ms: "%REQ(X-ENVOY-EXPECTED-RQ-TIMEOUT-MS)%"
                      x_b3_traceid: "%REQ(X-B3-TRACEID)%"
                      x_b3_parentspanid: "%REQ(X-B3-PARENTSPANID)%"
                      x_b3_spanid: "%REQ(X-B3-SPANID)%"
                      x_b3_sampled: "%REQ(X-B3-SAMPLED)%"
                    method: "%REQ(:METHOD)%"
                    path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                  response:
                    body:
                      bytes: "%BYTES_SENT%"
                    duration_resp: "%RESPONSE_DURATION%"
                    duration_tx: "%RESPONSE_TX_DURATION%"
                    flags: "%RESPONSE_FLAGS%"
                    headers:
                      access-control-allow-origin: "%RESP(ACCESS-CONTROL-ALLOW-ORIGIN)%"
                      content-length: "%RESP(CONTENT-LENGTH)%"
                      content-type: "%RESP(CONTENT-TYPE)%"
                      date: "%RESP(DATE)%"
                      server: "%RESP(SERVER)%"
                    status_code: "%RESPONSE_CODE%"
                    status_code_details: "%RESPONSE_CODE_DETAILS%"
                  version: "%PROTOCOL%"
                log:
                  level: "info"  # default envoy log level
                network:
                  direction: "inbound"
                server:
                  address: "%UPSTREAM_HOST%"
                service:
                  name: "envoy"
                  version: "1.16"
                user_agent.name: "%REQ(USER-AGENT)%"
  clusters:
  - name: service1
    connect_timeout: 0.250s
    type: strict_dns
    lb_policy: round_robin
    http2_protocol_options: {}
    load_assignment:
      cluster_name: service1
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: service1
                port_value: 8000
  - name: jaeger
    connect_timeout: 1s
    type: strict_dns
    lb_policy: round_robin
    load_assignment:
      cluster_name: jaeger
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: jaeger
                port_value: 9411
admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
